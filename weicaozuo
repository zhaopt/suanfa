c语言 原码 反码 补码
计算机进制数在机器表示为补码
正数的原码等于反码等于补码
负数的原码
负数的反码 等于原码取反（符号位不变）
负数的补码 等于负数的原码加一 
4
原码
0000 0100
反码
0000 0100
补码
0000 0100

-3
原码
1000 0011
反码
1111 1100
补码
1111 1101

4&-3  =  0000 0100 = 4
4|-3  =  1111 1101 = 1111 1100  = 1000 0011 = -3
// 负数的补码 转为原码需要 -1 取反
4^3   =  1111 1001 = 1111 1000  = 1000 0111 = -7

右移
4 >> 2 = 0000 0100 >> 2 = 0000 0001 = 1
左移
4 << 2 = 0000 0100 << 2 = 0001 0000 = 16

自己异或自己变为0
4^4 = 0


2进制转8进制 ， 每3位为一整体

0000 0100 转为 8进制 每 3位为一个整体

等于 

       000  000  100
等于
                  1*2~2+0*2~1+0*2~0
等于  4

2进制转 10进制 ，每一位乘以权重的和
等于

00000100
     0*2~3+1*2~2+0*2~1+0*2~0
等于4

2进制转16进制 是 取 4合一

等于

0000     0100
  等于 4

8进制转2进制

每个8进制为3个二进制除以2 取余
如果不够3位 则 左侧补零

8进制20  的二进制为  0001 0000


10进制转2进制
10进制数除2取余数，直到商为0 为止，第一个余数为最后一位

20 的二进制为  20除以2 商为10 余数为0 10除以2 商为5 余数是0 
5除以2商为2 余数是1 ，2除以2 商为1 余数为0 1除以2 商为0 余数为1

0001 0100   16+4 = 20


16进制转2进制

每个位是4个二进制位，除以2的余数，其余补零

1 为    1除以2 余数为1 商为0 就是  0001



10进制转 8 进制或 16进制

1.间接法 ，将 10进制 转为 2进制再转为定义的 8 或16进制

2.直接法，按照除8 或16 取余，直到商为0 


8进制或16进制 转为 10进制

把八进制、十六进制数按权展开、相加即得十进制数。

八进制 226

2*8~2+2*8~1+6*8~0


16进制和8进制转换

第一种：他们之间的转换可以先转成二进制然后再相互转换。

第二种：他们之间的转换可以先转成十进制然后再相互转换。


1。2进制 8进制 16进制 转为 10进制

思路：将各个位 摊开 ，乘以 2 或 8 或16 的幂减一

核心代码：
//2进制 8进制 16进制转 10进制
// pow(x,y) 求的是 x的y次方

$arr = [0=>0,1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9,'A'=>10,'B'=>11,'C'=>'12','D'=>'13','E'=>14,'F'=>15];
$total = $total+$arr[$tv]*pow($bin,$len-$i);

function bin_todec($datalist,$bin)
{
  $arr = [0=>0,1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9,'A'=>10,'B'=>11,'C'=>'12','D'=>'13','E'=>14,'F'=>15];
  if(!is_array($datalist) ||empty($datalist)||$bin == 10){
     return false;
  }

  $autoPut = [];

  foreach($datalist as $key=>$val){
        $anum = str_split($val);
        $len = count($anum);
        $total = 0;
        $i = 1;
        foreach($anum as $k=>$v){
                $tv = strtoupper($v);
                if(array_key_exists($tv,$arr)){
                        if($arr[$tv] == 0){
                            continue;
                        }
                        $total = $total+$arr[$tv]*pow($bin,$len-$i);
                }
                $i++;
        }
       $autoPut[] = $total;
  }
  return $autoPut;
}

var_dump(bin_todec(array('ff','ff33','cc33'),16));
#var_dump(bin_todec(array('1101101','111101101'),2));
#var_dump(bin_todec(array('1234123','12341'),8));




function bintodec($arr,$bin){
    $total = 0;
    $arrMenu = [0=>0,1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15];
    $arrlen = count($arr);
    $i = 1;
    foreach($arr as $val){
        $key = strtoupper($val);
        if(array_key_exists($key,$arrMenu)){
            if($arrMenu[$key] == 0){
                continue;
            }
        }
        $total += $arrMenu[$key]*pow($bin,$arrlen-$i);
        $i++;
    }
    return $total; 
}
$str = "ff";
var_dump(bintodec(str_split($str),16));


2, 10进制 转为 2 进制  8进制 16进制

是取余法， 10%2 10%8 10%16直到 商为0 为止

核心代码：

while($num > 0){ 
    $t = $arrMenu[$num%$bin].$t; //取余数并接关联
    $num = floor($num/$bin);
}
if($tlen % $bytelen !=0){
        $pad_len = $bytelen-$tlen%$bytelen;
        $t = str_pad("",$pad_len,"0",STR_PAD_LEFT).$t;
}

2进制占据 8个字节
8进制占据 4个字节
16进制占据 2个字节

function decto_bin($datalist,$bin){
   if(!is_array($datalist) || empty($datalist)){
           return false;
   }
   $arrMenu = [0=>0,1=>1,2=>2,3=>3,4=>4,5=>5,6=>6,7=>7,8=>8,9=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>'13','E'=>14,'F'=>15];
   $bytelen = ceil(16/$bin); //占据字节空间
   foreach($datalist as $val){
      
      $t = "";
      $num = intval($val);
      if($num === 0){
          continue;
      }
      while($num > 0){
          $t = $arrMenu[$num%$bin].$t;
          $num = floor($num/$bin);
      }
      $tlen = strlen($t); 
      if($tlen % $bytelen !=0){
         $pad_len = $bytelen-$tlen%$bytelen;
         $t = str_pad("",$pad_len,"0",STR_PAD_LEFT).$t; //补充0 
      }
      $aOutChar[] = $t;
   }

   return $aOutChar;
  }           
3.2进制转为 8 10 16 进制


0000 0100  -》 4
0000 0100  -》 4




bindec 二进制转10进制
decbin() - 十进制转换为二进制
octdec() - 八进制转换为十进制
hexdec() - 十六进制转换为十进制
base_convert() - 在任意进制之间转换数字




php进制转换函数如下： 

bindec() — 二进制转换为十进制 
decbin() — 十进制转换为二进制 
dechex() — 十进制转换为十六进制 
decoct() — 十进制转换为八进制 
hexdec() — 十六进制转换为十进制 
octdec() — 八进制转换为十进制 
base_convert()– 在任意进制之间转换数字 


str_pad 









  
  
  
  
  
  
  
  
  
  
  
  
  
  




